---
# The following variables will be set by the runner of this playbook:
# projects_root: Global location for caching project checkouts and roles and collections
#     should not have trailing slash on end
# local_path: Path within projects_root to use for this project
# scm_url: https://server/repo
# insights_url: Insights service URL (from configuration)
# scm_branch: branch/tag/revision (HEAD if unset)
# scm_clean: true/false
# scm_username: username (only for svn/insights)
# scm_password: password (only for svn/insights)
# scm_accept_hostkey: true/false (only for git, set automatically)
# scm_refspec: a refspec to fetch in addition to obtaining version
# roles_enabled: Value of the global setting to enable roles downloading
# collections_enabled: Value of the global setting to enable collections downloading
# awx_version: Current running version of the awx or tower as a string
# awx_license_type: "open" for AWX; else presume Tower

- hosts: localhost
  gather_facts: false
  connection: local
  name: Update source tree if necessary
  tasks:

    - name: delete project directory before update
      file:
        path: "{{projects_root}}/{{local_path}}"
        state: absent
      tags:
        - delete

    - block:
        - name: update project using git
          git:
            dest: "{{projects_root}}/{{local_path}}"
            repo: "{{scm_url}}"
            version: "{{scm_branch|quote}}"
            refspec: "{{scm_refspec|default(omit)}}"
            force: "{{scm_clean}}"
            accept_hostkey: "{{scm_accept_hostkey|default(omit)}}"
          register: git_result

        - name: Set the git repository version
          set_fact:
            scm_version: "{{ git_result['after'] }}"
          when: "'after' in git_result"
      tags:
        - update_git

    - block:
        - name: include hg tasks
          include_tasks: project_update_hg_tasks.yml
      tags:
        - update_hg

    - block:
        - name: update project using svn
          subversion:
            dest: "{{projects_root}}/{{local_path}}"
            repo: "{{scm_url|quote}}"
            revision: "{{scm_branch|quote}}"
            force: "{{scm_clean}}"
            username: "{{scm_username|default(omit)}}"
            password: "{{scm_password|default(omit)}}"
          environment:
            LC_ALL: 'en_US.UTF-8'
          register: svn_result

        - name: Set the svn repository version
          set_fact:
            scm_version: "{{ svn_result['after'] }}"
          when: "'after' in svn_result"

        - name: parse subversion version string properly
          set_fact:
            scm_version: "{{scm_version|regex_replace('^.*Revision: ([0-9]+).*$', '\\1')}}"
      tags:
        - update_svn

    - block:
        - name: Ensure the project directory is present
          file:
            dest: "{{projects_root}}/{{local_path}}"
            state: directory

        - name: Fetch Insights Playbook(s)
          insights:
            insights_url: "{{insights_url}}"
            username: "{{scm_username}}"
            password: "{{scm_password}}"
            project_path: "{{projects_root}}/{{local_path}}"
            awx_license_type: "{{awx_license_type}}"
            awx_version: "{{awx_version}}"
          register: results

        - name: Save Insights Version
          set_fact:
            scm_version: "{{results.version}}"
          when: results is defined
      tags:
        - update_insights

    - name: Repository Version
      debug:
        msg: "Repository Version {{ scm_version }}"
      tags:
        - update_git
        - update_hg
        - update_svn
        - update_insights

- hosts: localhost
  gather_facts: false
  connection: local
  name: Install content with ansible-galaxy command if necessary
  tasks:

    - block:
        - name: detect requirements.yml
          stat:
            path: '{{projects_root}}/{{local_path}}/roles/requirements.yml'
          register: doesRequirementsExist

        - name: fetch galaxy roles from requirements.yml
          command: >
            ansible-galaxy role install -r roles/requirements.yml
            --roles-path {{projects_root}}/.__awx_cache/{{local_path}}/stage/requirements_roles
            {{ ' -' + 'v' * ansible_verbosity if ansible_verbosity else '' }}
          args:
            chdir: "{{projects_root}}/{{local_path}}"
          register: galaxy_result
          when: doesRequirementsExist.stat.exists
          changed_when: "'was installed successfully' in galaxy_result.stdout"
          environment:
            ANSIBLE_FORCE_COLOR: false
            GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"

      when: roles_enabled|bool
      tags:
        - install_content

    - block:
        - name: detect collections/requirements.yml
          stat:
            path: '{{projects_root}}/{{local_path}}/collections/requirements.yml'
          register: doesCollectionRequirementsExist

        - name: fetch galaxy collections from collections/requirements.yml
          command: >
            ansible-galaxy collection install -r collections/requirements.yml
            --collections-path {{projects_root}}/.__awx_cache/{{local_path}}/stage/requirements_collections
            {{ ' -' + 'v' * ansible_verbosity if ansible_verbosity else '' }}
          args:
            chdir: "{{projects_root}}/{{local_path}}"
          register: galaxy_collection_result
          when: doesCollectionRequirementsExist.stat.exists
          changed_when: "'Installing ' in galaxy_collection_result.stdout"
          environment:
            ANSIBLE_FORCE_COLOR: false
            ANSIBLE_COLLECTIONS_PATHS: "{{projects_root}}/.__awx_cache/{{local_path}}/stage/requirements_collections"
            GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"

      when:
        - "ansible_version.full is version_compare('2.8', '>=')"
        - collections_enabled|bool
      tags:
        - install_content
